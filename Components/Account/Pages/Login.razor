@page "/Account/Login"

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> userManager
@inject IUserStore<ApplicationUser> UserStore


<PageTitle>Log in</PageTitle>
<br />

<h2>登入/注册</h2>
<h4>如是第一次登录，你的信息将直接完成注册</h4>
<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3 text-black-50">
                    <InputText @bind-Value="Input.UserName" class="form-control " autocomplete="username"
                        aria-required="true" placeholder="username" />
                    <label for="UserName" class="form-label">手机号/新用户将会直接注册</label>
                </div>
                <div class="form-floating mb-3 text-black-50">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control"
                        autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">密码/新用户请记住密码</label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg  btn-outline-info">登入</button>
                </div>
            </EditForm>
        </section>
        <div>
            <LoginChoose></LoginChoose>
        </div>
    </div>
</div>

<h4>@errorMessage</h4>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        //根据微信OpenID查是否存在用户，如果用户存在,则直接登录
        var checkUser = await userManager.FindByNameAsync(Input.UserName);
        if (checkUser is not null)
        {

            var result = await SignInManager.PasswordSignInAsync(Input.UserName, Input.Password, Input.RememberMe, lockoutOnFailure:
            false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else
            {
                errorMessage = "Error: 登录失败";
                return;
            }
        }
        else
        {
            var user = CreateUser();

            await UserStore.SetUserNameAsync(user, Input.UserName, CancellationToken.None);
            // await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
            var result = await userManager.CreateAsync(user, Input.Password);

            if (!result.Succeeded)
            {
                errorMessage = "Error: 登录失败";
                return;
            }
            await userManager.SetPhoneNumberAsync(user, Input.UserName);
            Logger.LogInformation("User created a new account with password.");
            await SignInManager.SignInAsync(user, isPersistent: true);
            RedirectManager.RedirectTo(ReturnUrl);

        }

    }


    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
            $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }


    private sealed class InputModel
    {
        [Required]
        public string UserName { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; } = true;
    }
}